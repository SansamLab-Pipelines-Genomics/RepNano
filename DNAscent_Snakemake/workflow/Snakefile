configfile: "config/config.yml"

##################################################################
##                    Define input functions                    ##
##################################################################

# Author: Chris Sansam
# Date: February 11, 2025

import pandas as pd

# read the CSV file and set an index using the values in the "alias" column.
samples_table = pd.read_csv(config["nanopore_samples_sheet"]).set_index("alias", drop=False)

##################################################################
##                          Rule All                            ##
##################################################################

rule all:
    input:
        expand("results/forkSense/{sample}/forksense.txt",sample=samples_table["alias"]),
        expand("results/detect_combined/{sample}.bam",sample=samples_table["alias"]),
        expand("results/detect_sorted/{sample}_chunk_{chunk}.bam",sample=samples_table["alias"],chunk=range(int(config["chunks_per_bam"])))
        #expand("results/detect/{sample}_chunk_{chunk}.bam", sample=samples_table["alias"],chunk=range(int(config["chunks_per_bam"])))
        #"results/MiniMapIndex/genome.mmi",
        #"results/dnascent_index/index.dnascent",
        #expand("results/split_bams/{sample}_chunk_{chunk}.bam", sample=samples_table["alias"],chunk=range(int(config["chunks_per_bam"])))


##################################################################
##                     Make genome index                        ##
##################################################################

rule make_genome_index:
    params:
        genome_link=config["genome_address"]
    output:
        genome_fasta="results/MiniMapIndex/genome.fa",
        genome_index="results/MiniMapIndex/genome.mmi"
    envmodules:
        config["minimap2"]
    shell:
        """
        wget -qO- {params.genome_link} | gunzip > {output.genome_fasta}
        minimap2 -x map-ont -d {output.genome_index} {output.genome_fasta}
        """

##################################################################
##          Run basecalling/alignment with Dorado               ##
##################################################################

rule Dorado_baseCalling_alignment:
    input:
        genome_index="results/MiniMapIndex/genome.mmi",
        pod5dir=config["pod5_directory"]
    output:
        "results/aligned/DoradoCallAndAlign.bam"
    params:
        kit=samples_table["kit"].iloc[0],
        mode=config["basecalling_mode"],
        device=config["dorado_device"],
        samples_sheet=config["nanopore_samples_sheet"]
    envmodules:
        config["cuda"],
        config["dorado"]
    shell:
        """
        dorado basecaller {params.mode} --kit-name {params.kit} --sample-sheet {params.samples_sheet} --device {params.device} {input.pod5dir}/ --reference {input.genome_index} > {output}
        """

##################################################################
##                   Demultiplex Alignments                     ##
##################################################################

rule demux_alignments:
    input:
        "results/aligned/DoradoCallAndAlign.bam"
    output:
        expand("results/demuxed/{sample}.bam", sample=samples_table["alias"]),
        #demuxed_bams=", ".join([f'"{str(element)}.bam"' for element in samples_table["alias"]])
    params:
        samples_sheet=config["nanopore_samples_sheet"],
        alias_names=" ".join([f'"{str(element)}"' for element in samples_table["alias"]])
    envmodules:
        config["dorado"]
    shell:
        """
        dorado demux -o "./results/demuxed/" --no-classify --sample-sheet {params.samples_sheet} --no-trim --sort-bam {input}
        alias_names=({params.alias_names})
        for alias in ${{alias_names[@]}}; do mv $(ls ./results/demuxed/*.bam.bai | grep  _${{alias}}.bam.bai) ./results/demuxed/${{alias}}.bam.bai; done
        for alias in ${{alias_names[@]}}; do mv $(ls ./results/demuxed/*.bam | grep  _${{alias}}.bam) ./results/demuxed/${{alias}}.bam; done
        """

# def discover_demuxed_files(wildcards):
#     """Use the checkpoint output to find all alias-based files."""
#     checkpoint_output = checkpoints.demux_alignments.get(
#         experiment_id=wildcards.experiment_id
#     ).output.demux_dir
    
#     # Now list or parse all files inside that directory
#     from glob import glob
#     files = glob(f"{checkpoint_output}/*.bam")
#     return files


##################################################################
##                        Split BAMs                            ##
##################################################################

rule split_bams:
    input:
        expand("results/demuxed/{sample}.bam", sample=samples_table["alias"])
    output:
        expand("results/split_bams/{sample}_chunk_{chunk}.bam", sample=samples_table["alias"],chunk=range(int(config["chunks_per_bam"])))
    params:
        chunks_per_bam=config["chunks_per_bam"],
        samtools_threads=config["samtools_threads"],
        demux_dir="./results/demuxed/"
    envmodules:
        config["samtools"]
    shell:
        """
        in_bam={input}
        echo "Processing file: $in_bam"
        ./bin/split_bam_by_reads.sh "$in_bam" "./results/split_bams/" "{params.chunks_per_bam}" "{params.samtools_threads}"
        """


##################################################################
##                      DNAscent Index                          ##
##################################################################

rule dnascent_index:
    input:
        pod5dir=config["pod5_directory"]
    output:
        "results/dnascent_index/index.dnascent"
    envmodules:
        config["dnascent"],
        config["cuda"]
    shell:
        """
        dnascent index -f {input} -o {output}
        """



##################################################################
##                       DNAscent Detect                        ##
##################################################################

rule dnascent_detect:
    input:
        index="results/dnascent_index/index.dnascent",
        bam_file="results/split_bams/{sample}_chunk_{chunk}.bam",
        genome_fasta="results/MiniMapIndex/genome.fa"
    output:
        "results/detect/{sample}_chunk_{chunk}.bam"
    params:
        minimum_read_length=config["minimum_read_length"],
        detect_threads=config["detect_threads"]
    envmodules:
        config["dnascent"],
        config["cuda"]
    shell:
        """
        dnascent detect -b {input.bam_file} -r {input.genome_fasta} -i {input.index} -o {output} --GPU 0 --length {params.minimum_read_length} --threads {params.detect_threads}
        """

##################################################################
##                       Sort Detect Chunks                     ##
##################################################################

rule sort_dnascent_detect:
    input:
        bam_file="results/detect/{sample}_chunk_{chunk}.bam"
    output:
        sorted_bam_file="results/detect_sorted/{sample}_chunk_{chunk}.bam"
    envmodules:
        config["samtools"]
    params:
        samtools_threads=config["samtools_threads"]
    shell:
        """
        samtools sort {input.bam_file} > {output.sorted_bam_file}
        samtools index {output.sorted_bam_file}
        """


##################################################################
##                    Combine Detect Chunks                     ##
##################################################################

rule combine_detect_chunks:
    input:
        bam_files=lambda wildcards: expand("results/detect_sorted/{sample}_chunk_{chunk}.bam", sample=wildcards.sample, chunk=range(int(config["chunks_per_bam"])))
    output:
        combined_bam_file="results/detect_combined/{sample}.bam"
    envmodules:
        config["samtools"]
    params:
        samtools_threads=config["samtools_threads"]
    shell:
        """
        samtools merge -@ {params.samtools_threads} {output.combined_bam_file} {input.bam_files}
        samtools index -@ {params.samtools_threads} {output.combined_bam_file}
        """

##################################################################
##                       DNAscent Forksense                     ##
##################################################################

rule dnascent_forksense:
    input:
        bam_file="results/detect_combined/{sample}.bam"
    output:
        output_dir=directory("results/forkSense/{sample}"),
        forksense="results/forkSense/{sample}/forksense.txt",
        BrdU="results/forkSense/{sample}/BrdU_DNAscent_forkSense.bed",
        EdU="results/forkSense/{sample}/EdU_DNAscent_forkSense.bed",
        left_stress="results/forkSense/{sample}/leftForks_DNAscent_forkSense_stressSignatures.bed",
        left="results/forkSense/{sample}/leftForks_DNAscent_forkSense.bed",
        origins="results/forkSense/{sample}/origins_DNAscent_forkSense.bed",
        right_stress="results/forkSense/{sample}/rightForks_DNAscent_forkSense_stressSignatures.bed",
        right="results/forkSense/{sample}/rightForks_DNAscent_forkSense.bed",
        terminations="results/forkSense/{sample}/terminations_DNAscent_forkSense.bed"
    params:
        label_order=config["label_order"],
        forkSense_threads=config["forkSense_threads"]
    envmodules:
        config["dnascent"],
        config["cuda"]
    shell:
        """
        mkdir -p {output.output_dir}
        cd {output.output_dir}
        dnascent forkSense -d ../../../{input.bam_file} -o forksense.txt -t {params.forkSense_threads} --order {params.label_order} --markAnalogues --markOrigins --markTerminations --markForks --makeSignatures
        """



