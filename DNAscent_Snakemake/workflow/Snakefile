configfile: "config/config.yml"

##################################################################
##                    Define input functions                    ##
##################################################################

# Author: Chris Sansam
# Date: February 11, 2025

import pandas as pd

# read the CSV file and set an index using the values in the "alias" column.
samples_table = pd.read_csv("config/samples.csv").set_index("experiment_id", drop=False)
samples_table2 = pd.read_csv("config/samples.csv").set_index("alias", drop=False)

##################################################################
##                          Rule All                            ##
##################################################################

rule all:
    input:
        "results/MiniMapIndex/genome.mmi",
        expand("results/aligned/{experiment_id}_DoradoCallAndAlign.bam", experiment_id=samples_table["experiment_id"].tolist()),
        expand("results/demultiplexed/{experiment_id}_demuxdir",experiment_id=samples_table["experiment_id"].tolist()),
        expand("results/split_bams/{experiment_id}",experiment_id=samples_table["experiment_id"].tolist()),

##################################################################
##                     Make genome index                        ##
##################################################################

rule make_genome_index:
    params:
        genome_link=config["genome_address"]
    output:
        genome_fasta="results/MiniMapIndex/genome.fa",
        genome_index="results/MiniMapIndex/genome.mmi"
    envmodules:
        config["minimap2"]
    shell:
        """
        wget -qO- {params.genome_link} | gunzip > {output.genome_fasta}
        minimap2 -x map-ont -d {output.genome_index} {output.genome_fasta}
        """

##################################################################
##          Run basecalling/alignment with Dorado               ##
##################################################################

rule Dorado_baseCalling_alignment:
    input:
        genome_index="results/MiniMapIndex/genome.mmi",
        #pod5dir=lambda wildcards: directory(samples_table[samples_table["experiment_id"] == wildcards.experiment_id]["path"].values[0])
        pod5dir=lambda wildcards: directory(samples_table.loc[wildcards.experiment_id, "path"])
    output:
        "results/aligned/{experiment_id}_DoradoCallAndAlign.bam"
    params:
        kit=lambda wildcards: samples_table.loc[wildcards.experiment_id, "kit"],
        mode=config["basecalling_mode"],
        device=config["dorado_device"],
        samples_sheet=config["nanopore_samples_sheet"]
    envmodules:
        config["cuda"],
        config["dorado"]
    shell:
        """
        dorado basecaller {params.mode} --kit-name {params.kit} --sample-sheet {params.samples_sheet} --device {params.device} {input.pod5dir}/ --reference {input.genome_index} > {output}
        """

##################################################################
##                   Demultiplex Alignments                     ##
##################################################################

checkpoint demux_alignments:
    input:
        "results/aligned/{experiment_id}_DoradoCallAndAlign.bam"
    output:
        demux_dir=directory("results/demultiplexed/{experiment_id}_demuxdir")
    params:
        samples_sheet=config["nanopore_samples_sheet"]
    envmodules:
        config["dorado"]
    shell:
        """
        dorado demux -o {output.demux_dir} --no-classify --sample-sheet {params.samples_sheet} --no-trim --sort-bam {input}
        """

def discover_demuxed_files(wildcards):
    """Use the checkpoint output to find all alias-based files."""
    checkpoint_output = checkpoints.demux_alignments.get(
        experiment_id=wildcards.experiment_id
    ).output.demux_dir
    
    # Now list or parse all files inside that directory
    from glob import glob
    files = glob(f"{checkpoint_output}/*.bam")
    return files


##################################################################
##                        Split BAMs                            ##
##################################################################

rule split_bams:
    input:
        discover_demuxed_files
    output:
        split_dir=directory("results/split_bams/{experiment_id}")
    params:
        reads_per_chunk=config["reads_per_chunk"],
        samtools_threads=config["samtools_threads"],
        demux_dir=directory("results/demultiplexed/{experiment_id}_demuxdir")
    envmodules:
        config["samtools"]
    shell:
        """
        inputs=({params.demux_dir}/*.bam)
        for i in "${!inputs[@]}"; do
          in_bam="${inputs[$i]}"
          ./bin/split_bam_by_reads.sh ${{in_bam}} {output.split_dir} {params.reads_per_chunk} {params.threads}"
        done
        """
