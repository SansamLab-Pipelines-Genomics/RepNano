configfile: "config/config.yml"

##################################################################
##                    Define input functions                    ##
##################################################################

# Author: Chris Sansam
# Date: February 11, 2025

import pandas as pd

# read the CSV file and set an index using the values in the "alias" column.
samples_table = pd.read_csv("config/samples.csv").set_index("alias", drop=False)

##################################################################
##                          Rule All                            ##
##################################################################

rule all:
    input:
        "results/MiniMapIndex/genome.mmi",
        expand("results/aligned/{experiment_id}_DoradoCallAndAlign.bam", experiment_id=samples_table["experiment_id"])


##################################################################
##                     Make genome index                        ##
##################################################################

rule make_genome_index:
    params:
        genome_link=config["genome_address"]
    output:
        genome_fasta="results/MiniMapIndex/genome.fa",
        genome_index="results/MiniMapIndex/genome.mmi"
    envmodules:
        config["minimap2"]
    shell:
        """
        wget -qO- {params.genome_link} | gunzip > {output.genome_fasta}
        minimap2 -x map-ont -d {output.genome_index} {output.genome_fasta}
        """

##################################################################
##          Run basecalling/alignment with Dorado               ##
##################################################################

# I need to get file from experiment_id

rule Dorado_baseCalling_alignment:
    input:
        genome_index="results/MiniMapIndex/genome.mmi",
        pod5dir=lambda wildcards: directory(samples_table.loc[wildcards.experiment_id, "path"])
    output:
        "results/aligned/{alias}_DoradoCallAndAlign.bam"
    params:
        kit=lambda wildcards: samples_table.loc[wildcards.alias, "kit"],
        mode=config["basecalling_mode"],
        device=config["dorado_device"],
        samples_sheet=config["nanopore_samples_sheet"]
    envmodules:
        config["cuda"],
        config["dorado"]
    shell:
        """
        dorado basecaller {params.mode} --kit-name {params.kit} --sample-sheet {params.samples_sheet} --device {params.device} {input.pod5dir}/ --reference {input.genome_index} > {output}
        """

# ##################################################################
# ##                   Demultiplex Alignments                     ##
# ##################################################################

# rule demux_alignments:
#     input:
#         "results/aligned/{alias}_DoradoCallAndAlign.bam"
#     output:
#         expand("results/demultiplexed/{alias}_DoradoCallAndAlignDemultiplexed.bam",alias=samples_table.index)

